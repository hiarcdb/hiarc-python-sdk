# coding: utf-8

"""
    Hiarc API

    Welcome to the Hiarc API documentation.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from hiarc.api_client import ApiClient


class CollectionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_child_to_collection(self, key, child_key, **kwargs):  # noqa: E501
        """Add a child item to a Collection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_child_to_collection(key, child_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of Collection (required)
        :param str child_key: Key of item to add as child to Collection (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_child_to_collection_with_http_info(key, child_key, **kwargs)  # noqa: E501
        else:
            (data) = self.add_child_to_collection_with_http_info(key, child_key, **kwargs)  # noqa: E501
            return data

    def add_child_to_collection_with_http_info(self, key, child_key, **kwargs):  # noqa: E501
        """Add a child item to a Collection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_child_to_collection_with_http_info(key, child_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of Collection (required)
        :param str child_key: Key of item to add as child to Collection (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'child_key', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_child_to_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `add_child_to_collection`")  # noqa: E501
        # verify the required parameter 'child_key' is set
        if ('child_key' not in params or
                params['child_key'] is None):
            raise ValueError("Missing the required parameter `child_key` when calling `add_child_to_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501
        if 'child_key' in params:
            path_params['childKey'] = params['child_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'JWTBearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{key}/children/{childKey}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_file_to_collection(self, body, key, **kwargs):  # noqa: E501
        """Add a File to a Collection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_file_to_collection(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddFileToCollectionRequest body: Add File request (required)
        :param str key: Key of Collection (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_file_to_collection_with_http_info(body, key, **kwargs)  # noqa: E501
        else:
            (data) = self.add_file_to_collection_with_http_info(body, key, **kwargs)  # noqa: E501
            return data

    def add_file_to_collection_with_http_info(self, body, key, **kwargs):  # noqa: E501
        """Add a File to a Collection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_file_to_collection_with_http_info(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddFileToCollectionRequest body: Add File request (required)
        :param str key: Key of Collection (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'key', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_file_to_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_file_to_collection`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `add_file_to_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'JWTBearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{key}/files', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_group_to_collection(self, body, key, **kwargs):  # noqa: E501
        """Add a Group to a Collection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_group_to_collection(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddGroupToCollectionRequest body: Add Group request (required)
        :param str key: Key of Collection (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_group_to_collection_with_http_info(body, key, **kwargs)  # noqa: E501
        else:
            (data) = self.add_group_to_collection_with_http_info(body, key, **kwargs)  # noqa: E501
            return data

    def add_group_to_collection_with_http_info(self, body, key, **kwargs):  # noqa: E501
        """Add a Group to a Collection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_group_to_collection_with_http_info(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddGroupToCollectionRequest body: Add Group request (required)
        :param str key: Key of Collection (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'key', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_group_to_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_group_to_collection`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `add_group_to_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'JWTBearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{key}/groups', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_user_to_collection(self, body, key, **kwargs):  # noqa: E501
        """Add a User to a Collection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_to_collection(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddUserToCollectionRequest body: Add User request (required)
        :param str key: Key of Collection (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_user_to_collection_with_http_info(body, key, **kwargs)  # noqa: E501
        else:
            (data) = self.add_user_to_collection_with_http_info(body, key, **kwargs)  # noqa: E501
            return data

    def add_user_to_collection_with_http_info(self, body, key, **kwargs):  # noqa: E501
        """Add a User to a Collection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_to_collection_with_http_info(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddUserToCollectionRequest body: Add User request (required)
        :param str key: Key of Collection (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'key', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_user_to_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_user_to_collection`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `add_user_to_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'JWTBearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{key}/users', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_collection(self, body, **kwargs):  # noqa: E501
        """Create a Collection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_collection(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCollectionRequest body: Collection information (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: Collection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_collection_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_collection_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_collection_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a Collection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_collection_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateCollectionRequest body: Collection information (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: Collection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/collections', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Collection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_collection(self, key, **kwargs):  # noqa: E501
        """Delete a Collection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_collection(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of Collection to delete (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_collection_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_collection_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def delete_collection_with_http_info(self, key, **kwargs):  # noqa: E501
        """Delete a Collection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_collection_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of Collection to delete (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `delete_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'JWTBearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{key}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_collection(self, body, **kwargs):  # noqa: E501
        """Find a Collection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_collection(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FindCollectionsRequest body: Collection query (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: ListOfCollections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_collection_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.find_collection_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def find_collection_with_http_info(self, body, **kwargs):  # noqa: E501
        """Find a Collection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_collection_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FindCollectionsRequest body: Collection query (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: ListOfCollections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `find_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'JWTBearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/collections/find', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListOfCollections',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_collections(self, **kwargs):  # noqa: E501
        """Get all Collections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_collections(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: ListOfCollections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_collections_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_collections_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_collections_with_http_info(self, **kwargs):  # noqa: E501
        """Get all Collections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_collections_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: ListOfCollections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_collections" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/collections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListOfCollections',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_collection(self, key, **kwargs):  # noqa: E501
        """Get a Collection's Info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_collection(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of collection to get info (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: Collection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_collection_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_collection_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def get_collection_with_http_info(self, key, **kwargs):  # noqa: E501
        """Get a Collection's Info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_collection_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of collection to get info (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: Collection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'JWTBearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Collection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_collection_children(self, key, **kwargs):  # noqa: E501
        """Get a Collection's child Collections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_collection_children(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of collection (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: ListOfCollections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_collection_children_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_collection_children_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def get_collection_children_with_http_info(self, key, **kwargs):  # noqa: E501
        """Get a Collection's child Collections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_collection_children_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of collection (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: ListOfCollections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_collection_children" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_collection_children`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'JWTBearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{key}/children', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListOfCollections',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_collection_files(self, key, **kwargs):  # noqa: E501
        """Get a Collection's Files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_collection_files(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of collection (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: ListOfFiles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_collection_files_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_collection_files_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def get_collection_files_with_http_info(self, key, **kwargs):  # noqa: E501
        """Get a Collection's Files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_collection_files_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of collection (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: ListOfFiles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_collection_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_collection_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'JWTBearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{key}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListOfFiles',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_collection_items(self, key, **kwargs):  # noqa: E501
        """Get a Collection's child items, including Collections and Files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_collection_items(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of collection (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: CollectionItems
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_collection_items_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_collection_items_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def get_collection_items_with_http_info(self, key, **kwargs):  # noqa: E501
        """Get a Collection's child items, including Collections and Files  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_collection_items_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of collection (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: CollectionItems
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_collection_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_collection_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'JWTBearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{key}/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionItems',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_file_from_collection(self, key, file_key, **kwargs):  # noqa: E501
        """Remove a File from a Collection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_file_from_collection(key, file_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of Collection (required)
        :param str file_key: Key of File to remove from Collection (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_file_from_collection_with_http_info(key, file_key, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_file_from_collection_with_http_info(key, file_key, **kwargs)  # noqa: E501
            return data

    def remove_file_from_collection_with_http_info(self, key, file_key, **kwargs):  # noqa: E501
        """Remove a File from a Collection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_file_from_collection_with_http_info(key, file_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of Collection (required)
        :param str file_key: Key of File to remove from Collection (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'file_key', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_file_from_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `remove_file_from_collection`")  # noqa: E501
        # verify the required parameter 'file_key' is set
        if ('file_key' not in params or
                params['file_key'] is None):
            raise ValueError("Missing the required parameter `file_key` when calling `remove_file_from_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501
        if 'file_key' in params:
            path_params['fileKey'] = params['file_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'JWTBearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{key}/files/{fileKey}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_collection(self, body, key, **kwargs):  # noqa: E501
        """Update a Collection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_collection(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCollectionRequest body: Collection information (required)
        :param str key: Key of collection to get info (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: Collection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_collection_with_http_info(body, key, **kwargs)  # noqa: E501
        else:
            (data) = self.update_collection_with_http_info(body, key, **kwargs)  # noqa: E501
            return data

    def update_collection_with_http_info(self, body, key, **kwargs):  # noqa: E501
        """Update a Collection  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_collection_with_http_info(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCollectionRequest body: Collection information (required)
        :param str key: Key of collection to get info (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: Collection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'key', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_collection`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `update_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'JWTBearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{key}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Collection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
