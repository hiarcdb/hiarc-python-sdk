# coding: utf-8

"""
    Hiarc API

    Welcome to the Hiarc API documentation.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from hiarc.api_client import ApiClient


class FileApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_classification_to_file(self, body, key, **kwargs):  # noqa: E501
        """Add a Classification to a File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_classification_to_file(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddClassificationToFileRequest body: Classification information (required)
        :param str key: Key of file (required)
        :param str x_hiarc_user_key:
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_classification_to_file_with_http_info(body, key, **kwargs)  # noqa: E501
        else:
            (data) = self.add_classification_to_file_with_http_info(body, key, **kwargs)  # noqa: E501
            return data

    def add_classification_to_file_with_http_info(self, body, key, **kwargs):  # noqa: E501
        """Add a Classification to a File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_classification_to_file_with_http_info(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddClassificationToFileRequest body: Classification information (required)
        :param str key: Key of file (required)
        :param str x_hiarc_user_key:
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'key', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_classification_to_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_classification_to_file`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `add_classification_to_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'JWTBearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/files/{key}/classifications', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_group_to_file(self, body, key, **kwargs):  # noqa: E501
        """Give a group access to a File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_group_to_file(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddGroupToFileRequest body: Group information (required)
        :param str key: Key of file (required)
        :param str x_hiarc_user_key:
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_group_to_file_with_http_info(body, key, **kwargs)  # noqa: E501
        else:
            (data) = self.add_group_to_file_with_http_info(body, key, **kwargs)  # noqa: E501
            return data

    def add_group_to_file_with_http_info(self, body, key, **kwargs):  # noqa: E501
        """Give a group access to a File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_group_to_file_with_http_info(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddGroupToFileRequest body: Group information (required)
        :param str key: Key of file (required)
        :param str x_hiarc_user_key:
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'key', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_group_to_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_group_to_file`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `add_group_to_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'JWTBearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/files/{key}/groups', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_retention_policy_to_file(self, body, key, **kwargs):  # noqa: E501
        """Add a Retention Policy to a File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_retention_policy_to_file(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddRetentionPolicyToFileRequest body: Retention Policy information (required)
        :param str key: Key of file (required)
        :param str x_hiarc_user_key:
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_retention_policy_to_file_with_http_info(body, key, **kwargs)  # noqa: E501
        else:
            (data) = self.add_retention_policy_to_file_with_http_info(body, key, **kwargs)  # noqa: E501
            return data

    def add_retention_policy_to_file_with_http_info(self, body, key, **kwargs):  # noqa: E501
        """Add a Retention Policy to a File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_retention_policy_to_file_with_http_info(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddRetentionPolicyToFileRequest body: Retention Policy information (required)
        :param str key: Key of file (required)
        :param str x_hiarc_user_key:
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'key', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_retention_policy_to_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_retention_policy_to_file`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `add_retention_policy_to_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'JWTBearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/files/{key}/retentionpolicies', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_user_to_file(self, body, key, **kwargs):  # noqa: E501
        """Give a user access to a File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_to_file(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddUserToFileRequest body: User information (required)
        :param str key: Key of file (required)
        :param str x_hiarc_user_key:
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_user_to_file_with_http_info(body, key, **kwargs)  # noqa: E501
        else:
            (data) = self.add_user_to_file_with_http_info(body, key, **kwargs)  # noqa: E501
            return data

    def add_user_to_file_with_http_info(self, body, key, **kwargs):  # noqa: E501
        """Give a user access to a File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_to_file_with_http_info(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddUserToFileRequest body: User information (required)
        :param str key: Key of file (required)
        :param str x_hiarc_user_key:
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'key', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_user_to_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_user_to_file`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `add_user_to_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'JWTBearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/files/{key}/users', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_version(self, request, filepath, key, filename='', **kwargs):  # noqa: E501
        """Add a new File Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_version(request, file, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str request: (required)
        :param str file: (required)
        :param str key: Key of file to add a version (required)
        :param str x_hiarc_user_key:
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_version_with_http_info(request, filepath, key, filename='', **kwargs)  # noqa: E501
        else:
            (data) = self.add_version_with_http_info(request, filepath, key, filename='', **kwargs)  # noqa: E501
            return data

    def add_version_with_http_info(self, request, filepath, key, filename='', **kwargs):  # noqa: E501
        """Add a new File Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_version_with_http_info(request, file, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str request: (required)
        :param str file: (required)
        :param str key: Key of file to add a version (required)
        :param str x_hiarc_user_key:
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request', 'filepath', 'filename', 'key', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        # if ('request' not in params or
        #         params['request'] is None):
        #     raise ValueError("Missing the required parameter `request` when calling `add_version`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('filepath' not in params or
                params['filepath'] is None):
            raise ValueError("Missing the required parameter `filepath` when calling `add_version`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `add_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}
        # if 'request' in params:
        #     form_params.append(('request', params['request']))  # noqa: E501
        # if 'file' in params:
        #     local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'JWTBearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/files/{key}/versions', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='File',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            is_upload=True, upload_object=request, 
            filepath=filepath, filename=filename,
            is_new_version=True)

    def attach_to_exisiting_file(self, body, key, **kwargs):  # noqa: E501
        """Attach to an existing File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_to_exisiting_file(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttachToExistingFileRequest body: File information (required)
        :param str key: Key of file to attach to (required)
        :param str x_hiarc_user_key:
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attach_to_exisiting_file_with_http_info(body, key, **kwargs)  # noqa: E501
        else:
            (data) = self.attach_to_exisiting_file_with_http_info(body, key, **kwargs)  # noqa: E501
            return data

    def attach_to_exisiting_file_with_http_info(self, body, key, **kwargs):  # noqa: E501
        """Attach to an existing File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_to_exisiting_file_with_http_info(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttachToExistingFileRequest body: File information (required)
        :param str key: Key of file to attach to (required)
        :param str x_hiarc_user_key:
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'key', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attach_to_exisiting_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `attach_to_exisiting_file`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `attach_to_exisiting_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'JWTBearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/files/{key}/attach', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='File',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def copy_file(self, body, key, **kwargs):  # noqa: E501
        """Copy a File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_file(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CopyFileRequest body: File information (required)
        :param str key: Key of file to attach to (required)
        :param str x_hiarc_user_key:
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.copy_file_with_http_info(body, key, **kwargs)  # noqa: E501
        else:
            (data) = self.copy_file_with_http_info(body, key, **kwargs)  # noqa: E501
            return data

    def copy_file_with_http_info(self, body, key, **kwargs):  # noqa: E501
        """Copy a File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_file_with_http_info(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CopyFileRequest body: File information (required)
        :param str key: Key of file to attach to (required)
        :param str x_hiarc_user_key:
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'key', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copy_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `copy_file`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `copy_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'JWTBearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/files/{key}/copy', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='File',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_direct_upload_url(self, body=None, **kwargs):  # noqa: E501
        """Create a direct upload url to a storage service  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_direct_upload_url(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateDirectUploadUrlRequest body: Storage service information (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :param int expires_in_seconds: When access to the url should expire
        :return: FileDirectUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_direct_upload_url_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_direct_upload_url_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_direct_upload_url_with_http_info(self, body=None, **kwargs):  # noqa: E501
        """Create a direct upload url to a storage service  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_direct_upload_url_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateDirectUploadUrlRequest body: Storage service information (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :param int expires_in_seconds: When access to the url should expire
        :return: FileDirectUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_hiarc_user_key', 'expires_in_seconds']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_direct_upload_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        # if ('body' not in params or
        #         params['body'] is None):
        #     raise ValueError("Missing the required parameter `body` when calling `create_direct_upload_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expires_in_seconds' in params:
            query_params.append(('expiresInSeconds', params['expires_in_seconds']))  # noqa: E501

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/files/directuploadurl', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileDirectUpload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_file(self, request, filepath, **kwargs):  # noqa: E501
        """Create a File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_file(request, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str request: (required)
        :param str file: (required)
        :param str x_hiarc_user_key:
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_file_with_http_info(request, filepath, **kwargs)  # noqa: E501
        else:
            (data) = self.create_file_with_http_info(request, filepath, **kwargs)  # noqa: E501
            return data

    def create_file_with_http_info(self, request, filepath, **kwargs):  # noqa: E501
        """Create a File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_file_with_http_info(request, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str request: (required)
        :param str file: (required)
        :param str x_hiarc_user_key:
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request', 'filepath', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `create_file`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('filepath' not in params or
                params['filepath'] is None):
            raise ValueError("Missing the required parameter `filepath` when calling `create_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}
        # if 'request' in params:
        #     form_params.append(('request', params['request']))  # noqa: E501
        # if 'file' in params:
        #     local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'JWTBearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/files', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='File',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            is_upload=True, upload_object=request, filepath=filepath)

    def delete_file(self, key, **kwargs):  # noqa: E501
        """Delete a File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_file(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of file to delete (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_file_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_file_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def delete_file_with_http_info(self, key, **kwargs):  # noqa: E501
        """Delete a File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_file_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of file to delete (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `delete_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'JWTBearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/files/{key}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_file(self, key, filepath, **kwargs):  # noqa: E501
        """Download a File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_file(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of file to download (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_file_with_http_info(key, filepath, **kwargs)  # noqa: E501
        else:
            (data) = self.download_file_with_http_info(key, filepath, **kwargs)  # noqa: E501
            return data

    def download_file_with_http_info(self, key, filepath, **kwargs):  # noqa: E501
        """Download a File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_file_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of file to download (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `download_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'JWTBearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/files/{key}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats,
            filepath=filepath,
            is_download=True)

    def get_collections_for_file(self, key, **kwargs):  # noqa: E501
        """Get a list of Collections for a File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_collections_for_file(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of file to get all collections (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: ListOfCollections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_collections_for_file_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_collections_for_file_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def get_collections_for_file_with_http_info(self, key, **kwargs):  # noqa: E501
        """Get a list of Collections for a File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_collections_for_file_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of file to get all collections (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: ListOfCollections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_collections_for_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_collections_for_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'JWTBearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/files/{key}/collections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListOfCollections',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_direct_download_url(self, key, **kwargs):  # noqa: E501
        """Get a direct download URL to a File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_direct_download_url(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of file to get download URL (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :param int expires_in_seconds: When access to the url should expire
        :return: FileDirectDownload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_direct_download_url_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_direct_download_url_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def get_direct_download_url_with_http_info(self, key, **kwargs):  # noqa: E501
        """Get a direct download URL to a File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_direct_download_url_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of file to get download URL (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :param int expires_in_seconds: When access to the url should expire
        :return: FileDirectDownload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'x_hiarc_user_key', 'expires_in_seconds']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_direct_download_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_direct_download_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []
        if 'expires_in_seconds' in params:
            query_params.append(('expiresInSeconds', params['expires_in_seconds']))  # noqa: E501

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'JWTBearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/files/{key}/directdownloadurl', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileDirectDownload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_file(self, key, **kwargs):  # noqa: E501
        """Get a File's Info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_file(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of file to get info (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_file_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_file_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def get_file_with_http_info(self, key, **kwargs):  # noqa: E501
        """Get a File's Info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_file_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of file to get info (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'JWTBearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/files/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='File',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_retention_policies(self, key, **kwargs):  # noqa: E501
        """Get a list of Retention Policies on a File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_retention_policies(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of file to get all retention policies (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: ListOfRetentionPolicyApplication
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_retention_policies_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_retention_policies_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def get_retention_policies_with_http_info(self, key, **kwargs):  # noqa: E501
        """Get a list of Retention Policies on a File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_retention_policies_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of file to get all retention policies (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: ListOfRetentionPolicyApplication
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_retention_policies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_retention_policies`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'JWTBearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/files/{key}/retentionpolicies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListOfRetentionPolicyApplication',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_versions(self, key, **kwargs):  # noqa: E501
        """Get a list of File Versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_versions(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of file to get all versions (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: ListOfFileVersions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_versions_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_versions_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def get_versions_with_http_info(self, key, **kwargs):  # noqa: E501
        """Get a list of File Versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_versions_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: Key of file to get all versions (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: ListOfFileVersions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_versions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_versions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'JWTBearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/files/{key}/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListOfFileVersions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_file(self, body, key, **kwargs):  # noqa: E501
        """Update a File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_file(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateFileRequest body: File information (required)
        :param str key: Key of file to update (required)
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_file_with_http_info(body, key, **kwargs)  # noqa: E501
        else:
            (data) = self.update_file_with_http_info(body, key, **kwargs)  # noqa: E501
            return data

    def update_file_with_http_info(self, body, key, **kwargs):  # noqa: E501
        """Update a File  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_file_with_http_info(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateFileRequest body: File information (required)
        :param str key: Key of file to update (required)
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_file`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `update_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/files/{key}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='File',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def filter_allowed_files(self, body, **kwargs):  # noqa: E501
        """Filter a list of File keys that a User can access  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filter_allowed_files(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AllowedFilesRequest body: File key list (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: AllowedFiles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.filter_allowed_files_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.filter_allowed_files_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def filter_allowed_files_with_http_info(self, body, **kwargs):  # noqa: E501
        """Filter a list of File keys that a User can access  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filter_allowed_files_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AllowedFilesRequest body: File key list (required)
        :param str x_hiarc_user_key: Optional key of user to impersonate
        :return: AllowedFiles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_hiarc_user_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method filter_allowed_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `filter_allowed_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_hiarc_user_key' in params:
            header_params['X-Hiarc-User-Key'] = params['x_hiarc_user_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/files/allowed', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AllowedFiles',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)