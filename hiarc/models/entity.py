# coding: utf-8

"""
    Hiarc API

    Welcome to the Hiarc API documentation.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'type': 'str',
        'name': 'str',
        'description': 'str',
        'metadata': 'dict(str, object)',
        'created_by': 'str',
        'created_at': 'datetime',
        'modified_at': 'datetime'
    }

    attribute_map = {
        'key': 'key',
        'type': 'type',
        'name': 'name',
        'description': 'description',
        'metadata': 'metadata',
        'created_by': 'createdBy',
        'created_at': 'createdAt',
        'modified_at': 'modifiedAt'
    }

    def __init__(self, key=None, type=None, name=None, description=None, metadata=None, created_by=None, created_at=None, modified_at=None):  # noqa: E501
        """Entity - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._type = None
        self._name = None
        self._description = None
        self._metadata = None
        self._created_by = None
        self._created_at = None
        self._modified_at = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if metadata is not None:
            self.metadata = metadata
        if created_by is not None:
            self.created_by = created_by
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at

    @property
    def key(self):
        """Gets the key of this Entity.  # noqa: E501


        :return: The key of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Entity.


        :param key: The key of this Entity.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def type(self):
        """Gets the type of this Entity.  # noqa: E501


        :return: The type of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Entity.


        :param type: The type of this Entity.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this Entity.  # noqa: E501


        :return: The name of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Entity.


        :param name: The name of this Entity.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Entity.  # noqa: E501


        :return: The description of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Entity.


        :param description: The description of this Entity.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def metadata(self):
        """Gets the metadata of this Entity.  # noqa: E501


        :return: The metadata of this Entity.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Entity.


        :param metadata: The metadata of this Entity.  # noqa: E501
        :type: dict(str, object)
        """

        self._metadata = metadata

    @property
    def created_by(self):
        """Gets the created_by of this Entity.  # noqa: E501


        :return: The created_by of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Entity.


        :param created_by: The created_by of this Entity.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_at(self):
        """Gets the created_at of this Entity.  # noqa: E501


        :return: The created_at of this Entity.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Entity.


        :param created_at: The created_at of this Entity.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this Entity.  # noqa: E501


        :return: The modified_at of this Entity.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Entity.


        :param modified_at: The modified_at of this Entity.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Entity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
