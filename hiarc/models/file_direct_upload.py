# coding: utf-8

"""
    Hiarc API

    Welcome to the Hiarc API documentation.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FileDirectUpload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'direct_upload_url': 'str',
        'storage_id': 'str',
        'storage_service': 'str',
        'expires_at': 'datetime'
    }

    attribute_map = {
        'direct_upload_url': 'directUploadUrl',
        'storage_id': 'storageId',
        'storage_service': 'storageService',
        'expires_at': 'expiresAt'
    }

    def __init__(self, direct_upload_url=None, storage_id=None, storage_service=None, expires_at=None):  # noqa: E501
        """FileDirectUpload - a model defined in Swagger"""  # noqa: E501
        self._direct_upload_url = None
        self._storage_id = None
        self._storage_service = None
        self._expires_at = None
        self.discriminator = None
        if direct_upload_url is not None:
            self.direct_upload_url = direct_upload_url
        if storage_id is not None:
            self.storage_id = storage_id
        if storage_service is not None:
            self.storage_service = storage_service
        if expires_at is not None:
            self.expires_at = expires_at

    @property
    def direct_upload_url(self):
        """Gets the direct_upload_url of this FileDirectUpload.  # noqa: E501


        :return: The direct_upload_url of this FileDirectUpload.  # noqa: E501
        :rtype: str
        """
        return self._direct_upload_url

    @direct_upload_url.setter
    def direct_upload_url(self, direct_upload_url):
        """Sets the direct_upload_url of this FileDirectUpload.


        :param direct_upload_url: The direct_upload_url of this FileDirectUpload.  # noqa: E501
        :type: str
        """

        self._direct_upload_url = direct_upload_url

    @property
    def storage_id(self):
        """Gets the storage_id of this FileDirectUpload.  # noqa: E501


        :return: The storage_id of this FileDirectUpload.  # noqa: E501
        :rtype: str
        """
        return self._storage_id

    @storage_id.setter
    def storage_id(self, storage_id):
        """Sets the storage_id of this FileDirectUpload.


        :param storage_id: The storage_id of this FileDirectUpload.  # noqa: E501
        :type: str
        """

        self._storage_id = storage_id

    @property
    def storage_service(self):
        """Gets the storage_service of this FileDirectUpload.  # noqa: E501


        :return: The storage_service of this FileDirectUpload.  # noqa: E501
        :rtype: str
        """
        return self._storage_service

    @storage_service.setter
    def storage_service(self, storage_service):
        """Sets the storage_service of this FileDirectUpload.


        :param storage_service: The storage_service of this FileDirectUpload.  # noqa: E501
        :type: str
        """

        self._storage_service = storage_service

    @property
    def expires_at(self):
        """Gets the expires_at of this FileDirectUpload.  # noqa: E501


        :return: The expires_at of this FileDirectUpload.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this FileDirectUpload.


        :param expires_at: The expires_at of this FileDirectUpload.  # noqa: E501
        :type: datetime
        """

        self._expires_at = expires_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileDirectUpload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileDirectUpload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
